{"version":3,"sources":["serviceWorker.ts","store/modules/todo.js","login/index.tsx","about/index.tsx","components/AddTodo.js","components/Todo.tsx","components/TodoList.tsx","components/Link.tsx","containers/FilterLink.js","components/Footer.tsx","containers/TApp.js","containers/Type/game.js","containers/Type/index.js","containers/Guess/game.ts","containers/Guess/index.tsx","containers/Space/game.ts","containers/Space/index.tsx","app/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","VisibilityFilters","addTodo","text","type","setVisibilityFilter","filter","SHOW_ALL","todoApp","combineReducers","visibilityFilter","state","action","todos","completed","slice","index","Object","assign","Login","useState","setState","history","useHistory","className","onSubmit","e","preventDefault","push","process","name","value","onChange","target","required","About","useLocation","AddTodo","input","dispatch","trim","ref","node","connect","Todo","onClick","style","textDecoration","TodoList","onTodoClick","map","todo","key","Link","active","children","href","FilterLink","ownProps","Footer","selectTodos","timer_text","accuracy_text","error_text","cpm_text","wpm_text","quote_text","input_area","restart_btn","cpm_group","wpm_group","visibleTodos","onAddClick","completeTodo","onFilterChange","nextFilter","quotes_array","timeLeft","timeElapsed","total_errors","errors","characterTyped","current_quote","quoteNo","timer","updateQuote","textContent","split","forEach","char","charSpan","document","createElement","innerText","appendChild","length","processCurrentText","curr_input","curr_input_array","querySelectorAll","typedChar","classList","remove","add","accuracyVal","Math","round","startGame","resetValues","clearInterval","setInterval","updateTimer","disabled","display","cpm","wpm","finishGame","Type","useEffect","querySelector","placeholder","onInput","onFocus","gameInit","y","floor","random","guess","getElementById","onclick","field","x","parseInt","alert","Guess","htmlFor","id","initGame","can","ctx","getContext","width","innerWidth","height","img","Image","src","imgHeight","loop","drawImage","requestAnimationFrame","abc","Space","NoMatch","pathname","App","url","basename","to","exact","path","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50c42d0c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\n\nconst ADD_TODO = \"ADD_TODO\";\nconst COMPLETE_TODO = \"COMPLETE_TODO\";\nconst SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\n\nexport const VisibilityFilters = {\n    SHOW_ALL: \"SHOW_ALL\",\n    SHOW_COMPLETED: \"SHOW_COMPLETED\",\n    SHOW_ACTIVE: \"SHOW_ACTIVE\"\n};\n\nexport function addTodo(text) {\n    return { type: ADD_TODO, text };\n}\n\nexport function completeTodo(index) {\n    return { type: COMPLETE_TODO, index };\n}\n\nexport function setVisibilityFilter(filter) {\n    return { type: SET_VISIBILITY_FILTER, filter };\n}\n\nconst { SHOW_ALL } = VisibilityFilters;\n\nfunction visibilityFilter(state = SHOW_ALL, action) {\n    switch (action.type) {\n        case SET_VISIBILITY_FILTER:\n            return action.filter;\n        default:\n            return state;\n    }\n}\n\nfunction todos(state = [] , action) {\n    switch (action.type) {\n        case ADD_TODO:\n            return [...state, {\n                text: action.text,\n                completed: false\n            }];\n        case COMPLETE_TODO:\n            return [\n                ...state.slice(0, action.index),\n                Object.assign({}, state[action.index], {\n                    completed: true\n                }),\n                ...state.slice(action.index + 1)\n            ];\n        default:\n            return state;\n    }\n}\n\nconst todoApp = combineReducers({\n    visibilityFilter,\n    todos\n});\n\nexport default todoApp","import React, { useState } from 'react';\nimport './login.scss';\nimport { useHistory } from 'react-router-dom';\n\nconst Login: React.FC = () => {\n  const [state, setState] = useState();\n  const history = useHistory();\n\n  const action = (e: React.FormEvent) => {\n    e.preventDefault();\n    history.push(`${process.env.REACT_APP_BASE_URL}/about`, { name : state });\n  }\n\n  return (\n    <div className=\"Login\">\n      <form onSubmit={action}>\n        <h1>현빈이 키우기</h1>\n        <label>\n          - 당신의 이름 -\n        </label>\n        <input type=\"text\" value={state} onChange={(e) => setState(e.target.value)} required />\n        <input type=\"submit\" />\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport './about.scss';\nimport { useLocation } from 'react-router-dom';\n\ninterface loca {\n  state: {\n    name: String\n  }\n}\n\nconst About: React.FC = () => {\n\n  const location: loca = useLocation();\n  return (\n    <div className=\"About\">\n      <h1>게임을 시작하지</h1>\n        <h1>{location.state ? location.state.name : null}</h1>\n    </div>\n  );\n}\n\nexport default About;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../store/modules/todo\"\n\nlet AddTodo = ({ dispatch }) => {\n    let input\n\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault()\n                    if (!input.value.trim()) {\n                        return\n                    }\n                    dispatch(addTodo(input.value))\n                    input.value = ''\n                }}\n                >\n                    <input\n                        ref={node => {\n                            input = node\n                        }}\n                    />\n                    <button type=\"submit\">\n                        할일 추가\n                    </button>\n                </form>\n        </div>\n    )\n}\n\nAddTodo = connect()(AddTodo)\n\nexport default AddTodo","import React from \"react\";\ninterface Props {\n    onClick: () => '',\n    completed: boolean,\n    text: String\n}\nconst Todo: React.FC<Props> = ({ onClick, completed, text }) => (\n    <li\n        onClick={onClick}\n        style={ {\n            textDecoration: completed ? 'line-through' : 'none'\n        }}\n    >\n        {text}\n    </li>\n)\n\nexport default Todo;","import React from \"react\";\nimport Todo from \"./Todo\";\n\ninterface Props {\n    todos: [],\n    onTodoClick: (a: String | Number) => ''\n}\n\nconst TodoList: React.FC<Props> = ({ todos, onTodoClick }) => (\n    <ul>\n        {todos.map((todo, index) => (\n            <Todo key={index} {...todo} onClick={() => onTodoClick(index)} />\n        ))}\n    </ul>\n)\n\nexport default TodoList;","import React from \"react\";\n\ninterface Props {\n    active: boolean,\n    children: Node,\n    onClick: Function\n}\n\nconst Link: React.FC<Props> = ({ active, children, onClick }) => {\n    if (active) {\n        return <span>{children}</span>\n    }\n\n    return (\n        // eslint-disable-next-line\n        <a\n            href=\"\"\n            onClick={e => {\n                e.preventDefault()\n                onClick()\n            }}\n            >\n                {children}\n            </a>\n    )\n}\n\nexport default Link","import { connect } from \"react-redux\";\nimport { setVisibilityFilter } from \"../store/modules/todo\"; \nimport Link from \"../components/Link\"\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        active: ownProps.filter === state.visibilityFilter\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        onClick: () => {\n            dispatch(setVisibilityFilter(ownProps.filter))\n        }\n    }\n}\n\nconst FilterLink = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Link)\n\nexport default FilterLink","import React from \"react\";\nimport FilterLink from \"../containers/FilterLink\"\n\nconst Footer = () => (\n    <p>\n        Show:\n        {' '}\n        <FilterLink filter=\"SHOW_ALL\">\n            ALL\n        </FilterLink>\n        {', '}\n        <FilterLink filter=\"SHOW_ACTIVE\">\n            Active\n        </FilterLink>\n        {', '}\n        <FilterLink filter=\"SHOW_COMPLETED\">\n            Completed\n        </FilterLink>\n    </p>\n)\n\nexport default Footer","import React from \"react\";\nimport AddTodo from '../components/AddTodo';\nimport TodoList from '../components/TodoList';\nimport Footer from '../components/Footer';\n// import VisibleTodoList from \"./VisibleTodoList\"\nimport { addTodo, completeTodo, setVisibilityFilter, VisibilityFilters } from \"../store/modules/todo\";\nimport { connect } from \"react-redux\";\n\nconst TApp = ({ dispatch, visibleTodos, visibilityFilter }) => (\n    <div>\n        <AddTodo\n            onAddClick={text => dispatch(addTodo(text))} />\n        <TodoList\n            todos={visibleTodos}\n            onTodoClick={index => dispatch(completeTodo(index))} />\n        <Footer\n            filter={visibilityFilter}\n            onFilterChange={nextFilter => dispatch(setVisibilityFilter(nextFilter))} />\n    </div>\n)\n\nfunction selectTodos(todos, filter) {\n    switch (filter) {\n        case VisibilityFilters.SHOW_ALL:\n            return todos;\n        case VisibilityFilters.SHOW_COMPLETED:\n            return todos.filter(todo => todo.completed);\n        case VisibilityFilters.SHOW_ACTIVE:\n            return todos.filter(todo => !todo.completed);\n        default:\n            return;\n    }\n}\n\n\nfunction select(state) {\n    return {\n        visibleTodos: selectTodos(state.todos, state.visibilityFilter),\n        visibilityFilter: state.visibilityFilter\n    }\n}\nexport default connect(select)(TApp)","// define the time limit\nlet TIME_LIMIT = 60;\n\n// define quotes to be used\nlet quotes_array = [\n    \"너 자신을 푸쉬행, 왜냠 아무도 너를 위해 그것을 해주지 않앙.\",\n    \"실패는 조미료야, 그 맛을 내는.\",\n    \"확신을 갖고 일어나구, 만족하며 잠들엉.\",\n    \"힘들 수 도 있엉, 하지만 불가능이란 뜻은 아니얌.\",\n    \"면빈이키우기\",\n    \"당신의 일을 사랑하세용.\"\n];\n\n// selecting required elements\nlet timer_text;\nlet accuracy_text;\nlet error_text;\nlet cpm_text;\nlet wpm_text;\nlet quote_text;\nlet input_area;\nlet restart_btn;\nlet cpm_group;\nlet wpm_group;\n// eslint-disable-next-line\nlet error_group;\n// eslint-disable-next-line\nlet accuracy_group;\n\nfunction initGame() {\n    timer_text = document.querySelector(\".curr_time\");\n    accuracy_text = document.querySelector(\".curr_accuracy\");\n    error_text = document.querySelector(\".curr_errors\");\n    cpm_text = document.querySelector(\".curr_cpm\");\n    wpm_text = document.querySelector(\".curr_wpm\");\n    quote_text = document.querySelector(\".quote\");\n    input_area = document.querySelector(\".input_area\");\n    restart_btn = document.querySelector(\".restart_btn\");\n    cpm_group = document.querySelector(\".cpm\");\n    wpm_group = document.querySelector(\".wpm\");\n    error_group = document.querySelector(\".errors\");\n    accuracy_group = document.querySelector(\".accuracy\");\n}\n\nlet timeLeft = TIME_LIMIT;\nlet timeElapsed = 0;\nlet total_errors = 0;\nlet errors = 0;\n// eslint-disable-next-line\nlet accuracy = 0;\nlet characterTyped = 0;\nlet current_quote = \"\";\nlet quoteNo = 0;\nlet timer = null;\n\nfunction updateQuote() {\n    quote_text.textContent = null;\n    current_quote = quotes_array[quoteNo];\n\n    // separate each character and make an element\n    // out of each of them to individually style them\n    current_quote.split('').forEach(char => {\n        const charSpan = document.createElement('span')\n        charSpan.innerText = char\n        quote_text.appendChild(charSpan)\n    })\n\n    // roll over to the first quote\n    if (quoteNo < quotes_array.length - 1)\n        quoteNo++;\n    else\n        quoteNo = 0;\n}\n\nfunction processCurrentText() {\n    // get current input text and split it\n    let curr_input = input_area.value;\n    let curr_input_array = curr_input.split('');\n\n    // increment total characters typed\n    characterTyped++;\n\n    errors = 0;\n\n    let quoteSpanArray = quote_text.querySelectorAll('span');\n    quoteSpanArray.forEach((char, index) => {\n        let typedChar = curr_input_array[index]\n\n        // character not currently typed\n        if (typedChar == null) {\n            char.classList.remove('correct_char');\n            char.classList.remove('incorrect_char');\n        \n            // correct character\n        } else if (typedChar === char.innerText) {\n            char.classList.add('correct_char');\n            char.classList.remove('incorrect_char');\n\n            // incorrect character\n        } else {\n            char.classList.add('incorrect_char');\n            char.classList.remove('correct_char');\n\n            // increment number of errors\n            errors++;\n        }\n    })\n\n    // display the number of errors\n    error_text.textContent = total_errors + errors;\n\n    // update accuracy text\n    let correctCharacters = (characterTyped - (total_errors + errors));\n    let accuracyVal = ((correctCharacters / characterTyped) * 100);\n    accuracy_text.textContent = Math.round(accuracyVal);\n\n    // if current text is completely typed\n    // irrespective of errors\n    if (curr_input.length === current_quote.length) {\n        updateQuote();\n\n        // update total errors\n        total_errors += errors;\n\n        // clear the input area\n        input_area.value = \"\";\n    }\n}\n\nfunction startGame() {\n    resetValues();\n    updateQuote();\n\n    // clear old and start a new timer\n    clearInterval(timer);\n    timer = setInterval(updateTimer, 1000);\n}\n\nfunction resetValues() {\n    timeLeft = TIME_LIMIT;\n    timeElapsed = 0;\n    errors = 0;\n    total_errors = 0;\n    accuracy = 0;\n    characterTyped = 0;\n    quoteNo = 0;\n    input_area.disabled = false;\n\n    input_area.value = \"\";\n    quote_text.textContent = 'Click on the area below to start the game.';\n    accuracy_text.textContent = 100;\n    timer_text.textContent = timeLeft + 's';\n    error_text.textContent = 0;\n    restart_btn.style.display = \"none\";\n    cpm_group.style.display = \"none\";\n    wpm_group.style.display = \"none\";\n}\n\nfunction updateTimer() {\n    if (timeLeft > 0) {\n        // decrease the current time left\n        timeLeft--;\n\n        // increase the time elapsed\n        timeElapsed++;\n\n        // update the timer text\n        timer_text.textContent = timeLeft + \"s\";\n    } else {\n        // finish the game\n        finishGame();\n    }\n}\n\nfunction finishGame() {\n    // stop the timer\n    clearInterval(timer);\n\n    // disable the input area\n    input_area.disabled = true;\n\n    // show finishing text\n    quote_text.textContent = \"Click on restart to start a new game.\";\n\n    // display restart button\n    restart_btn.style.display = \"block\";\n\n    // calculate cpm and wpm\n    let cpm = Math.round(((characterTyped / timeElapsed) * 60));\n    let wpm = Math.round((((characterTyped / 5) / timeElapsed) * 60));\n\n    // update cpm and wpm text\n    cpm_text.textContent = cpm;\n    wpm_text.textContent = wpm;\n\n    // display the cpm and wpm\n    cpm_group.style.display = \"block\";\n    wpm_group.style.display = \"block\";\n}\n\nexport { initGame, processCurrentText, resetValues, startGame };","import React, { useEffect } from \"react\";\nimport { initGame, processCurrentText, resetValues, startGame } from \"./game\";\nimport \"./style.css\";\n\nconst Type = () => {\n\n    useEffect(() => {\n        initGame();\n    }, []);\n    \n    return (\n        <div className=\"container\">\n            <div className=\"heading\">\n                Simple Speed Typing\n            </div>\n            <div className=\"header\">\n                <div className=\"wpm\">\n                    <div className=\"header_text\">WPM</div>\n                    <div className=\"curr_wpm\">100</div>\n                </div>\n                <div className=\"cpm\">\n                    <div className=\"header_text\">CPM</div>\n                    <div className=\"curr_cpm\">100</div>\n                </div>\n                <div className=\"errors\">\n                    <div className=\"header_text\">Errors</div>\n                    <div className=\"curr_errors\">0</div>\n                </div>\n                <div className=\"timer\">\n                    <div className=\"header_text\">Time</div>\n                    <div className=\"curr_time\">60s</div>\n                </div>\n                <div className=\"accuracy\">\n                    <div className=\"header_text\">% Accuracy</div>\n                    <div className=\"curr_accuracy\">100</div>\n                </div>\n            </div>\n            <div className=\"quote\">\n                Click on the area below to start the game.\n            </div>\n            <textarea className=\"input_area\"\n                placeholder=\"start typing here...\"\n                onInput={processCurrentText}\n                onFocus={startGame}>\n            </textarea>\n            <button className=\"restart_btn\"\n                onClick={resetValues}>\n                Restart\n            </button>\n        </div>)\n}\n\nexport default Type;","function gameInit() {\n    // random value generated\n    const y = Math.floor(Math.random() * 10 + 1);\n\n    // counting the number of guesses\n    // made for correct Guess\n    let guess = 1;\n    const dom =  document.getElementById(\"submitguess\")!;\n\n    dom.onclick = function () {\n        // eslint-disable-next-line\n        const field = (<HTMLInputElement>document.getElementById(\"guessField\")!);\n        // number guessed by user\n        let x = parseInt(field.value);\n\n        if (x === y) {\n            alert(\"CONGRATULATIONS !!! YOU GUESSED IT RIGHT IN \"\n                + guess + \" GUESS \");\n            // if guessed number is greater than actual number\n        } else if (x > y) {\n            guess++;\n            alert(\"OOPS SORRY!! TRY A SMALLER NUMBER\");\n        } else {\n            guess++;\n            alert(\"OOPS SORRY!! TRY A GREATER NUMBER\");\n        }\n\n    }\n}\n\nexport default gameInit;","import React, { useEffect } from \"react\";\nimport gameInit from \"./game\";\n\nconst Guess: React.FC = () => {\n\n    useEffect(() => gameInit(), []);\n    \n    return (\n        <div className=\"form\">\n            <label htmlFor=\"guessField\">\n                Enter a guess :\n            </label>\n            <input type=\"text\" id=\"guessField\" className=\"gueeField\" />\n            <input type=\"submit\" value=\"Submit guess\" className=\"guessSubmit\" id=\"submitguess\" />\n        </div>\n    );\n}\n\nexport default Guess;","function initGame() {\n    // inside main game ts\n    // eslint-disable-next-line\n    const can = (<HTMLCanvasElement>document.getElementById(\"canvas1\"));\n\n    // The 2D Context for the HTML canvas element.\n    // It provides objects, methods, and properties to draw\n    // and manipulate graphics on a canvas drawing surface.\n    const ctx = can.getContext(\"2d\");\n\n    // canvas width and height\n    can.width = window.innerWidth;\n    can.height = 600;\n\n    // create an image element\n    const img = new Image();\n\n    // specify the image source relative to the html or js file\n    // when the image is in the same directory as the file\n    // only the file name is required:\n    if (process.env.NODE_ENV !== \"production\") {\n        img.src = `http://localhost:3000/spacebg.png`;    \n    } else {\n        img.src = `${process.env.REACT_APP_BASE_URL}/spacebg.png`;\n    }\n\n    // window.onload is an event that occurs when all the assets\n    // have been succesfuly loaded (in this case only the spacebg.png)\n    abc(ctx, img, can);\n}\n\nfunction abc(ctx: any, img: any, can: any) {\n    // the initial image height\n    let imgHeight = 0;\n\n    // the scroll speed\n    // an important thing to ensure here is that can.height\n    // is divisible by scrollSpeed\n    const scrollSpeed = 10;\n\n    // this is the primary animation loop that is called 60 times\n    // per second\n    function loop() {\n        // draw image 1\n        ctx?.drawImage(img, 0, imgHeight, can.width, can.height);\n\n        // draw image 2\n        ctx?.drawImage(img, 0, imgHeight - can.height, can.width, can.height);\n\n        // update image height\n        imgHeight += scrollSpeed;\n\n        // reseting the images when the first image entirely\n        // exits the screen\n        if (imgHeight === can.height) {\n            imgHeight = 0;\n        }\n\n        // this function creates a 60fps animation by scheduling a\n        // loop function call before the\n        // next redraw every time it is called\n        window.requestAnimationFrame(loop);\n    }\n\n    // this initiates the animation by calling the loop function\n    // for the first time\n    loop();\n}\n\nexport default initGame;","import React, { useEffect } from \"react\";\nimport initGame from \"./game\";\n\nconst Space: React.FC = () => {\n\n    useEffect(() => initGame(), []);\n\n    return (\n        <canvas id=\"canvas1\">\n        </canvas>\n    );\n}\n\nexport default Space;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  BrowserRouter,\n  useLocation\n} from \"react-router-dom\";\nimport './App.scss';\nimport Login from '../login';\nimport About from '../about';\nimport TApp from '../containers/TApp';\nimport Type from '../containers/Type';\nimport Guess from '../containers/Guess';\nimport Space from '../containers/Space';\n\nconst App: React.FC = () => {\n  \n  const url = `${process.env.REACT_APP_BASE_URL}`;\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename={url}>\n        <div>\n          <ul className=\"app-menu\">\n            <Link to={`/`}><li>\n              로그잉\n            </li></Link>\n            <Link to={`/about`}><li>\n              방구\n            </li></Link>\n            <Link to={`/dashboard`}><li>\n              투두\n            </li></Link>\n            <Link to={`/type`}><li>\n              타입\n            </li></Link>\n            <Link to={`/guess`}><li>\n              추측\n            </li></Link>\n            <Link to={`/space`}><li>\n              우주\n            </li></Link>\n          </ul>\n\n          <hr />\n\n          {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n          <Switch>\n            <Route exact path={`/`}>\n              <Login />\n            </Route>\n            <Route path={`/about`}>\n              <About />\n            </Route>\n            <Route path={`/dashboard`}>\n              <TApp />\n            </Route>\n            <Route path={`/type`}>\n              <Type />\n            </Route>\n            <Route path={`/guess`}>\n              <Guess />\n            </Route>\n            <Route path={`/space`}>\n              <Space />\n            </Route>\n            <Route path=\"*\">\n            <NoMatch />\n          </Route>\n          </Switch>\n        </div>\n      </BrowserRouter >\n    </div >\n  );\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n    <div>\n      <h3>\n        No match for <code>{location.pathname}</code>\n      </h3>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport todoApp from \"./store/modules/todo\";\nimport App from './app';\n\nlet store = createStore(todoApp);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
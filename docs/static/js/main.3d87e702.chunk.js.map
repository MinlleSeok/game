{"version":3,"sources":["login/index.tsx","about/index.tsx","app/index.tsx","serviceWorker.ts","index.tsx"],"names":["Login","useState","state","setState","history","useHistory","className","onSubmit","e","preventDefault","push","process","name","type","value","onChange","target","required","About","location","useLocation","App","to","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSA0BeA,G,MAtBS,WAAO,IAAD,EACFC,qBADE,mBACrBC,EADqB,KACdC,EADc,KAEtBC,EAAUC,cAOhB,OACE,yBAAKC,UAAU,SACb,0BAAMC,SAPK,SAACC,GACdA,EAAEC,iBACFL,EAAQM,KAAR,UAAgBC,QAAhB,UAAwD,CAAEC,KAAOV,MAM7D,uCACO,6CADP,wBAGA,2BAAOW,KAAK,OAAOC,MAAOZ,EAAOa,SAAU,SAACP,GAAD,OAAOL,EAASK,EAAEQ,OAAOF,QAAQG,UAAQ,IACpF,2BAAOJ,KAAK,eCCLK,G,MAXS,WAEtB,IAAMC,EAAiBC,cACvB,OACE,yBAAKd,UAAU,SACb,2EACE,4BAAKa,EAASjB,MAAQiB,EAASjB,MAAMU,KAAO,SC0CrCS,EA/CO,WAEpB,OACE,yBAAKf,UAAU,OACb,kBAAC,IAAD,KACE,6BACE,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMgB,GAAE,UAAKX,QAAL,MAAwC,qCAGhD,kBAAC,IAAD,CAAMW,GAAE,UAAKX,QAAL,WAA6C,sCAGrD,kBAAC,IAAD,CAAMW,GAAE,UAAKX,QAAL,eAAiD,2CAK3D,6BASA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAI,UAAKb,QAAL,MACf,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOa,KAAI,UAAKb,QAAL,WACT,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOa,KAAI,UAAKb,QAAL,eACT,kBAAC,EAAD,YCrCMc,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3d87e702.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './login.scss';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Login: React.FC = () => {\r\n  const [state, setState] = useState();\r\n  const history = useHistory();\r\n\r\n  const action = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    history.push(`${process.env.REACT_APP_BASE_URL}/about`, { name : state });\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <form onSubmit={action}>\r\n        <label>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </label>\r\n        <input type=\"text\" value={state} onChange={(e) => setState(e.target.value)} required />\r\n        <input type=\"submit\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport './about.scss';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\ninterface loca {\r\n  state: {\r\n    name: String\r\n  }\r\n}\r\n\r\nconst About: React.FC = () => {\r\n\r\n  const location: loca = useLocation();\r\n  return (\r\n    <div className=\"About\">\r\n      <h1>게임을 시작하지</h1>\r\n        <h1>{location.state ? location.state.name : null}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.scss';\nimport Login from '../login';\nimport About from '../about';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <ul className=\"app-menu\">\n            <Link to={`${process.env.REACT_APP_BASE_URL}/`}><li>\n              Home\n            </li></Link>\n            <Link to={`${process.env.REACT_APP_BASE_URL}/about`}><li>\n              about\n            </li></Link>\n            <Link to={`${process.env.REACT_APP_BASE_URL}/dashboard`}><li>\n              Dashboard\n            </li></Link>\n          </ul>\n\n          <hr />\n\n          {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n          <Switch>\n            <Route exact path=\"/\">\n              <Login />\n            </Route>\n            <Route exact path={`${process.env.REACT_APP_BASE_URL}/`}>\n              <Login />\n            </Route>\n            <Route path={`${process.env.REACT_APP_BASE_URL}/about`}>\n              <About />\n            </Route>\n            <Route path={`${process.env.REACT_APP_BASE_URL}/dashboard`}>\n              <Login />\n            </Route>\n          </Switch>\n        </div>\n      </Router >\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}